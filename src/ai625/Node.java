package ai625;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by Amos on 2017/9/15.
 */
public class Node implements Comparable<Node> {

    // State
    State state;

    // Parent
    Node parent;

    // Action taken by Parent format: (from,to)
    Action action;

    // Path cost
    long pathCost;

    // depth
    int rank;

    // h function
    int hIndex;

    // Initialize node
    public Node(int block, int stack, boolean isRandom) {

        state = new State(block, stack, false);
        // Root node
        parent = null;
        action = null;
        pathCost = 0;
        rank = 0;
        hIndex = generateHIndex2();
    }

    // Node generated by actions
    public Node(State prevState, Node parent, Action action, long pathCost, int rank) {
        this.state = new State(prevState, action);
        this.parent = parent;
        this.action = action;
        this.pathCost = pathCost;
        this.rank = rank;
        this.hIndex = generateHIndex2();
    }



    private int generateHIndex2() {
        List<Integer> firstStack = state.board.get(1);
        int hIndex = state.block;

        int nextIntToMove = 1;

        for(int i=0; i<firstStack.size(); i++) {
            if(firstStack.get(i) == i+1) {
                hIndex -= 1;
                nextIntToMove = i+1+1;
            }
        }

        // Let the weights above be greater
        hIndex *= 6;
        // Add moves required to move next to right pos
        for(int j=2; j<=state.stack; j++) {
            List<Integer> toCheck = state.board.get(j);
            for(int k=0; k<toCheck.size(); k++) {
                if(toCheck.get(k) == nextIntToMove) {
                    // Calculate the weight
                    hIndex += 3*(toCheck.size()-k);
                }
            }
        }
        return hIndex + rank*3;
    }
    private int generateHIndex1() {
        List<Integer> firstStack = state.board.get(1);
        int hIndex = state.block;

        int nextIntToMove = 1;

        for(int i=0; i<firstStack.size(); i++) {
            if(firstStack.get(i) == i+1) {
                hIndex -= 1;
                nextIntToMove = i+1+1;
            }
        }

        // Let the weights above be greater
        hIndex *= 6;
        // Add moves required to move next to right pos
        for(int j=2; j<=state.stack; j++) {
            List<Integer> toCheck = state.board.get(j);
            for(int k=0; k<toCheck.size(); k++) {
                if(toCheck.get(k) == nextIntToMove) {
                    // Calculate the weight
                    hIndex += 3*(toCheck.size()-k);
                }
            }
        }

        return hIndex + rank*6;
    }
    private int generateHIndex0() {
        List<Integer> firstStack = state.board.get(1);
        int hIndex = state.block;
        for(int i=0; i<firstStack.size(); i++) {
            if(firstStack.get(i) == i+1) {
                hIndex -= 1;
            }
        }
        return hIndex + rank;
    }





    public List<Node> generateSuccessors() {
        List<Node> res = new ArrayList<>();

        List<List<Integer>> currentBoard = state.board;
        // Generate all the moves
        for(int i=1; i<=state.stack; i++) {
            List<Integer> fromStack = currentBoard.get(i);
            // Skip empty stacks
            if(fromStack.isEmpty()) {
                continue;
            }
            for(int j=1; j<=state.stack; j++) {
                if(i == j) {
                    continue;
                }
                // Perform the move
                Node newNode = new Node(state, this, new Action(i,j), pathCost+1, rank+1);

                res.add(newNode);
            }
        }
        return res;
    }



    // Used for priority queue
    @Override
    public int compareTo(Node o) {
        return Integer.compare(hIndex   , o.hIndex);
    }
}
