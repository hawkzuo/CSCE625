package ai625;

import org.omg.PortableInterceptor.INACTIVE;

import java.util.*;

/**
 * Created by Amos on 2017/9/15.
 */
public class Node implements Comparable<Node> {

    // State
    State state;

    // Parent
    Node parent;

    // Action taken by Parent format: (from,to)
    Action action;

    // Path cost
    long pathCost;

    // depth
    int rank;

    // h function
    int hIndex;

    // Initialize node
    public Node(int block, int stack, boolean isRandom) {

        state = new State(block, stack, isRandom);
        // Root node
        parent = null;
        action = null;
        pathCost = 0;
        rank = 0;
        hIndex = generateHIndex5();
    }

    // Initialize arbitrary node
    public Node(int block, int stack, int[][] inputs) {

        state = new State(block, stack, inputs);
        // Root node
        parent = null;
        action = null;
        pathCost = 0;
        rank = 0;
        hIndex = generateHIndex5();
    }


    // Node generated by actions
    public Node(State prevState, Node parent, Action action, long pathCost, int rank) {
        this.state = new State(prevState, action);
        this.parent = parent;
        this.action = action;
        this.pathCost = pathCost;
        this.rank = rank;
        this.hIndex = generateHIndex5();
    }



    private int calIndex5For1stStack(int index, List<Integer> stack, int blocks) {
        int blockNum = stack.get(index);
        Integer bottom=null, upper = null;
        int result = 0;
        if(index > 0) {
            bottom = stack.get(index-1);
        }
        if(index + 1 < stack.size()) {
            upper = stack.get(index + 1);
        }

        if(blockNum == 1) {
            if(bottom != null) {
                result ++;
            }
            if(upper == null || upper != blockNum+1) {
                result ++;
            }
        } else if(blockNum == blocks) {
            if(upper != null) {
                result ++;
            }
            if(bottom == null || bottom != blockNum-1) {
                result ++;
            }
        } else {
            if(bottom == null || bottom != blockNum-1) {
                result ++;
            }
            if(upper == null || upper != blockNum+1) {
                result ++;
            }
        }
        return result;

    }

    private int generateHIndex5() {
//        calculates the difference between the current state and the goal state,
//        but looks at the details of each block.
//        If Block A in the goal state is supposed to be on top of Block B and under Block C
//        and in the current state it is neither on top of B or under C, then we add 2 to the heuristic.
        // 12345
        // 1
        // 5432
        // 2345


        // 2345
        // 1

        // 1345
        // 2

        // 1543
        // 2            {1-345 is better than 1-543}


        // 1
        // 2
        // 345

        // 1
        // 2
        // 543  534

        //{543 is better than 345 ==? 534}  531
        int disOrder = 0;
        List<Integer> firstStack = state.board.get(1);
        for(int i=0; i<firstStack.size(); i++) {
            if(firstStack.get(i) != i+1) {
                disOrder += 2;
            }
        }

        for(int j=2; j<=state.stack; j++) {
            List<Integer> toCheck = state.board.get(j);
            Map<Integer, Integer> disOrders = new HashMap<>();
            // New line
            disOrder += toCheck.size();

            for (Integer stepNumber : toCheck) {
                disOrders.put(stepNumber, 0);
                for (Map.Entry<Integer, Integer> entry : disOrders.entrySet()) {
                    if (entry.getKey() < stepNumber) {
                        entry.setValue(entry.getValue() + 1);
                    }
                }
            }

            int disOrderForStack = 0;

            for(Map.Entry<Integer, Integer> entry: disOrders.entrySet()) {
                disOrderForStack = Math.max(disOrderForStack, entry.getValue());
            }
            disOrder += disOrderForStack;
        }



        return disOrder + rank;
    }






    // New Idea: Calculate all the blocks and the count of blocks greater than it
    private int generateHIndex4() {
        List<Integer> firstStack = state.board.get(1);
        double hIndex = state.block;
        int nextIntToMove = 1;

        int disOrder = 0;

        for(int i=0; i<firstStack.size(); i++) {
            if(firstStack.get(i) == i+1) {
                hIndex -= 1;
                nextIntToMove = i+1+1;
            } else {
                hIndex += 2/state.stack;
                break;
            }
        }
        // Let the weights above be greater

        // Cal the disOrder part

        for(int j=2; j<=state.stack; j++) {
            List<Integer> toCheck = state.board.get(j);
            Map<Integer, Integer> disOrders = new HashMap<>();
            for (Integer stepNumber : toCheck) {
                disOrders.put(stepNumber, 0);
                for (Map.Entry<Integer, Integer> entry : disOrders.entrySet()) {
                    if (entry.getKey() < stepNumber) {
                        entry.setValue(entry.getValue() + 1);
                    }
                }
            }
            for(Map.Entry<Integer, Integer> entry: disOrders.entrySet()) {
                if(entry.getKey() == nextIntToMove) {
                    disOrder += 1 * entry.getValue();
                } else {
                    disOrder += entry.getValue();
                }

            }
        }

        hIndex = hIndex*(1+state.block) + 2*disOrder + rank*(1+state.block)/2 ;
        return (int) hIndex;
    }

    // Rank ratio ++ => More admissible

    private int generateHIndex3() {
        List<Integer> firstStack = state.board.get(1);
        int hIndex = state.block;
        int nextIntToMove = 1;

        for(int i=0; i<firstStack.size(); i++) {
            if(firstStack.get(i) == i+1) {
                hIndex -= 1;
                nextIntToMove = i+1+1;
            }
        }
        // Let the weights above be greater
        hIndex *= 6;
        // Add moves required to move next to right pos
        for(int j=2; j<=state.stack; j++) {
            List<Integer> toCheck = state.board.get(j);
            for(int k=0; k<toCheck.size(); k++) {
                if(toCheck.get(k) == nextIntToMove) {
                    // Calculate the weight
                    hIndex += 2*(toCheck.size()-k);
                }
            }
        }
        return hIndex + rank*3;
    }

    private int generateHIndex2() {
        List<Integer> firstStack = state.board.get(1);
        int hIndex = state.block;
        int nextIntToMove = 1;

        for(int i=0; i<firstStack.size(); i++) {
            if(firstStack.get(i) == i+1) {
                hIndex -= 1;
                nextIntToMove = i+1+1;
            }
        }
        // Let the weights above be greater
        hIndex *= 6;
        // Add moves required to move next to right pos
        for(int j=2; j<=state.stack; j++) {
            List<Integer> toCheck = state.board.get(j);
            for(int k=0; k<toCheck.size(); k++) {
                if(toCheck.get(k) == nextIntToMove) {
                    // Calculate the weight
                    hIndex += 3*(toCheck.size()-k);
                }
            }
        }
        return hIndex + rank*3;
    }

    private int generateHIndex1() {
        List<Integer> firstStack = state.board.get(1);
        int hIndex = state.block;
        int nextIntToMove = 1;

        for(int i=0; i<firstStack.size(); i++) {
            if(firstStack.get(i) == i+1) {
                hIndex -= 1;
                nextIntToMove = i+1+1;
            }
        }
        // Let the weights above be greater
        hIndex *= 6;
        // Add moves required to move next to right pos
        for(int j=2; j<=state.stack; j++) {
            List<Integer> toCheck = state.board.get(j);
            for(int k=0; k<toCheck.size(); k++) {
                if(toCheck.get(k) == nextIntToMove) {
                    // Calculate the weight
                    hIndex += 3*(toCheck.size()-k);
                }
            }
        }
        return hIndex + rank*6;
    }

    private int generateHIndex0() {
        List<Integer> firstStack = state.board.get(1);
        int hIndex = state.block;
        for(int i=0; i<firstStack.size(); i++) {
            if(firstStack.get(i) == i+1) {
                hIndex -= 1;
            }
        }
        return hIndex + rank;
    }

    public List<Node> generateSuccessors() {
        List<Node> res = new ArrayList<>();

        List<List<Integer>> currentBoard = state.board;
        // Generate all the moves
        for(int i=1; i<=state.stack; i++) {
            List<Integer> fromStack = currentBoard.get(i);
            // Skip empty stacks
            if(fromStack.isEmpty()) {
                continue;
            }
            for(int j=1; j<=state.stack; j++) {
                if(i == j) {
                    continue;
                }
                // Perform the move
                Node newNode = new Node(state, this, new Action(i,j), pathCost+1, rank+1);

                res.add(newNode);
            }
        }
        return res;
    }

    // Used for priority queue
    @Override
    public int compareTo(Node o) {
        return Integer.compare(hIndex, o.hIndex);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof Node && this.state.equals(((Node) obj).state);
    }
}
